#version 430

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer NeuronData {
  vec4 neurons[]; // x,y = position, z = activation, w = threshold
};

layout(std430, binding = 1) buffer SynapseData {
  int synapses[];
};

layout(std430, binding = 2) buffer WeightData {
  float weights[]; 
};

layout(std430, binding = 2) buffer SynapseVertexData {
    Vertex vertices[];
};

uniform float delta_t;
uniform int max_synapses;
uniform float neuron_count;

void main() {
  uint neuron_id = gl_GlobalInvocationID.x;
  if (neuron_id >= neurons.length()) return;

  vec4 source_neuron = neurons[neuron_id];

  for (int i = 0; i < max_synapses; i++) {
    int target_id = synapses[neuron_id * max_synapses + i];
    if (target_id < 0) continue;

    vec4 target_neuron = neurons[target_id];

    // Each synapse creates 2 vertices
    uint vertex_base = (neuron_id * max_synapses + i) * 2;

    // Source vertex
    vertices[vertex_base].position = source_neuron.xy;
    vertices[vertex_base].activation = source_neuron.z;

    // Target vertex
    vertices[vertex_base + 1].position = target_neuron.xy;
    vertices[vertex_base + 1].activation = target_neuron.z;
  }

  // // Get current neuron data
  // vec4 neuron = neurons[neuron_id];
  // float activation = neuron.z;
  // float threshold = neuron.w;

  // // Sum inputs from connected neurons
  // float input_sum = 0.0;
  // uint synapse_offset = neuron_id * 16;  // MAX_SYNAPSES

  // // Update activation
  // if (input_sum > threshold) {
  //   activation = 1.0;
  // } else {
  //   // activation *= 0.95;  // Decay
  //   activation *= 0.9;  // Decay
  // }

  // // Store updated activation
  // neurons[neuron_id].z = activation;
}
